import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.eclipse.rdf4j.model.vocabulary.RDF;

import javax.swing.*;
import java.awt.*;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Date;

/**
 * Created by christine on 20.01.17.
 */

/**
 * Used in a JOptionDialog to add a new author.
 */
public class AddAuthorDialog extends JDialog {
    private JTextField nameTextField;
    private JRadioButton maleRadioButton;
    private JRadioButton femaleRadioButton;
    private JPanel addAuthorView;
    private JTextField dateOfBirthTextField;
    private JOptionPane optionPane;


    public AddAuthorDialog(Frame aFrame) {
        super(aFrame, true);

        Object[] options = {"Save", "Cancel"}; // the two options the user can select in the optionPane
        optionPane = new JOptionPane(addAuthorView, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION, null, options, options[0]);
        setContentPane(optionPane);
        optionPane.addPropertyChangeListener(new MyPropertyChangeListener());
        pack();
    }

    /**
     * set the dialog to visible and return "Save" or "Cancel" depending on what the user clicks
     *
     * @return
     */
    public String showDialog() {
        setVisible(true);
        return optionPane.getValue().toString();
    }

    public String getName() {
        return nameTextField.getText();
    }

    public String getGender() {
        String gender = "";
        if (maleRadioButton.isSelected()) {
            gender = "male";
        } else {
            gender = "female";
        }
        return gender;
    }

    public String getDateOfBirth() {
        return dateOfBirthTextField.getText(); //TODO parse input and check if correct date
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        addAuthorView = new JPanel();
        addAuthorView.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setFont(new Font(label1.getFont().getName(), label1.getFont().getStyle(), 48));
        label1.setHorizontalTextPosition(0);
        label1.setText("Book Manager");
        addAuthorView.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        addAuthorView.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Name");
        panel2.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nameTextField = new JTextField();
        panel2.add(nameTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Gender");
        panel3.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        maleRadioButton = new JRadioButton();
        maleRadioButton.setSelected(true);
        maleRadioButton.setText("male");
        panel3.add(maleRadioButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        femaleRadioButton = new JRadioButton();
        femaleRadioButton.setText("female");
        panel3.add(femaleRadioButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel4, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Date of Birth");
        panel4.add(label4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dateOfBirthTextField = new JTextField();
        panel4.add(dateOfBirthTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        label2.setLabelFor(nameTextField);
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(maleRadioButton);
        buttonGroup.add(femaleRadioButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return addAuthorView;
    }

    private class MyPropertyChangeListener implements PropertyChangeListener {
        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            String prop = evt.getPropertyName();
            if (isVisible() && evt.getSource() == optionPane && prop.equals(JOptionPane.VALUE_PROPERTY)) {
                boolean okToClose = true;
                if (evt.getNewValue().equals("Save")) {
                    String dateOfBirthString = dateOfBirthTextField.getText();
                    if (!dateOfBirthTextField.getText().equals("")) {
                        try {
                            Date d = new Date(Integer.parseInt(dateOfBirthString.substring(0, 4)) - 1900, Integer.parseInt(dateOfBirthString.substring(5, 7)) - 1, Integer.parseInt(dateOfBirthString.substring(8, 10)));
                        } catch (Exception e1) {
                            JOptionPane.showMessageDialog(null, "Your date format seams to be wrong. It should be YYYY-MM-DD.", "Error", JOptionPane.ERROR_MESSAGE);
                            okToClose = false;
                        }
                    }
                    String id = getName().replaceAll(" ", "") + "_" + getDateOfBirth();
                    if (id.length() > 1) { //if the id is not empty
                        if (RepoHandler.getAll(MainWindow.getRepo(), "Author").contains(id) || ModelHandler.contains(MainWindow.getModel(), id, RDF.TYPE, "Author", 'I')) {
                            JOptionPane.showMessageDialog(null, "This author exists already.", "Error", JOptionPane.ERROR_MESSAGE);
                            okToClose = false;
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Please enter some information about the author.", "Error", JOptionPane.ERROR_MESSAGE);
                        okToClose = false;
                    }
                } else if (evt.getNewValue().equals("wait")) { //used to keep the dialog open, if the input was not ok
                    okToClose = false;
                }
                if (okToClose) {
                    setVisible(false);
                } else { //if the user clicked on "Save" but the input was not ok
                    //set the value of the optionPane to an intermediate value,
                    // so that when the user clicks again on "Save" the listener fires again
                    optionPane.setValue("wait");
                }

            }
        }
    }
}

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.eclipse.rdf4j.model.Model;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;

/**
 * Created by christine on 19.01.17.
 */

/**
 * Main window from where the user starts
 */
public class MainWindow {
    private JButton addBookButton;
    private JButton searchBookButton;
    private JPanel mainView;
    private JButton showBooksButton;
    private static JFrame mainFrame;
    private static Model model;
    private static final String INPUT_FILE_PATH = "src/main/resources/output.ttl";

    public MainWindow() {
        showBooksButton.addActionListener(new ShowBooksClicked());
        addBookButton.addActionListener(new AddBookBtnClicked());
        searchBookButton.addActionListener(new SearchBookButtonClicked());
        model = FileHandler.readModelFromFile(INPUT_FILE_PATH);
    }

    public static void main(String[] args) {
        mainFrame = new JFrame("MainWindow");
        mainFrame.setContentPane(new MainWindow().mainView);
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mainFrame.pack();
        mainFrame.setVisible(true);
    }

    public static Model getModel() {
        return model;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainView = new JPanel();
        mainView.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setFont(new Font(label1.getFont().getName(), label1.getFont().getStyle(), 48));
        label1.setHorizontalTextPosition(0);
        label1.setText("Book Manager");
        mainView.add(label1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addBookButton = new JButton();
        addBookButton.setText("Add Book");
        mainView.add(addBookButton, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        searchBookButton = new JButton();
        searchBookButton.setText("Search Book");
        mainView.add(searchBookButton, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        showBooksButton = new JButton();
        showBooksButton.setText("Show Books");
        mainView.add(showBooksButton, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainView;
    }

    /**
     * ActionListener for the search book button
     */
    private class SearchBookButtonClicked implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            //shows a dialog which contains the search book panel
            Object[] options = {"Back"}; //Button to return to the main window
            SearchBookPanel sbp = new SearchBookPanel();
            JOptionPane.showOptionDialog(null, sbp.getSearchBookView(), "Search Book", JOptionPane.CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
        }
    }

    /**
     * Action listener for the add book button (manual addition)
     */
    private class AddBookBtnClicked implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {

            //show the AddBookDialog, which returns the value of the button clicked
            AddBookDialog abp = new AddBookDialog(null, INPUT_FILE_PATH);
            String o = abp.showDialog();

            if (o.equals("Save")) { // if the user wanted to save the book

                //get all the information for the AddBookDialog
                String isbn = abp.getIsbn();
                String title = abp.getTitle();
                String urlCover = abp.getUrlCover();
                String publicationYear = abp.getPublicationYear();
                String genre = abp.getGenre();
                String publisher = abp.getPublisher();
                String language = abp.getLanguage();
                String author = abp.getAuthor();


                try {
                    Book b;
                    if (publicationYear.equals("")) { //if the publicationYear is empty, replace it with null
                        b = new Book(isbn, author, title, publisher, genre, null);
                    } else { //if the publicationYear is not empty, parse it to an integer
                        b = new Book(isbn, author, title, publisher, genre, Integer.parseInt(publicationYear));
                    }
                    ModelHandler.addBook(b, MainWindow.getModel());//add the book to the model
                    FileHandler.writeModelToFile(INPUT_FILE_PATH, model);
                } catch (IOException e1) {
                    e1.printStackTrace(); //TODO Handle IOException for Cover Url
                }
            }
        }
    }

    private class ShowBooksClicked implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            showBooksDialog sbd = new showBooksDialog();
        }
    }
}



